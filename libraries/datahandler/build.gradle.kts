/*
 * This file was generated by the Gradle 'init' task.
 */

plugins {
    id("org.eclipse.sw360.java-conventions")
}

dependencies {
    api("org.apache.commons:commons-csv:1.9.0")
    api("commons-codec:commons-codec:1.15")
    api("com.github.ldriscoll:ektorplucene:0.2.0")
    api("org.apache.logging.log4j:log4j-api:2.19.0")
    api("org.apache.logging.log4j:log4j-core:2.19.0")
    api("org.jetbrains:annotations:15.0")
    api("commons-io:commons-io:2.11.0")
    api("org.ektorp:org.ektorp:1.5.0")
    api("com.google.code.gson:gson:2.10.1")
    api("com.cloudant:cloudant-client:2.19.1")
    api("com.fasterxml.jackson.core:jackson-databind:2.14.2")
    api("com.fasterxml.jackson.core:jackson-core:2.14.2")
    api("com.fasterxml.jackson.core:jackson-annotations:2.14.2")
    api("com.github.stephenc.findbugs:findbugs-annotations:1.3.9-1")
    api("org.apache.httpcomponents:httpcore:4.4.16")
    api("org.apache.thrift:libthrift:0.16.0")
    api("org.slf4j:slf4j-api:1.7.30")
    api("com.google.guava:guava:32.0.0-jre")
    api("com.google.guava:failureaccess:1.0.1")
    api("org.apache.maven:maven-model:3.9.2")
    runtimeOnly("org.apache.logging.log4j:log4j-slf4j-impl:2.19.0")
    runtimeOnly("org.apache.logging.log4j:log4j-jcl:2.19.0")
    testImplementation("org.hamcrest:hamcrest-all:1.3")
    testImplementation("junit:junit:4.13.2")
    testImplementation("org.mockito:mockito-core:4.7.0")
    testImplementation("com.tngtech.jgiven:jgiven-junit:0.17.0")
    testImplementation("com.tngtech.java:junit-dataprovider:1.13.1")
}

description = "datahandler"

// compileThrift {
//     Set<File> files = new HashSet<>()
//     files.add(file("src/test/thrift/test.thrift"))
//     sourceItems += files
//     outputDir = file('build/thrift')
//     createGenFolder = false
// }

// sourceSets {
//     main {
//         java {
//             srcDirs += 'build/thrift'
//         }
//     }
// }

abstract class ThriftTask : DefaultTask() {
    @get:Incremental
    @get:InputDirectory
    abstract val inputDir: DirectoryProperty
    @get:OutputDirectory
    abstract val outputDir: DirectoryProperty

    @TaskAction
    fun generateThrift(inputChanges: InputChanges) {
        println(
            if (inputChanges.isIncremental) "Incremental" else "Non-incremental"
        )

        inputChanges.getFileChanges(inputDir).forEach { change ->
            if(change.fileType == FileType.DIRECTORY) {
                return@forEach
            }
            println("${change.changeType}: ${change.normalizedPath}")
            val targetFile = outputDir.file(change.normalizedPath).get().asFile
            if (change.changeType == ChangeType.REMOVED) {
                targetFile.delete()
            } else {
                project.exec { comand   "thrift", "-out", outputDir.get().asFile.absolutePath, "-r", "-gen", "java", "-v", "--debug", change.file.absolutePath }
                // targetFile.writeText(change.file.readText().reversed())
                // project.exec { commandLine cmdLine }
            }
        }
    }
}

tasks.register<ThriftTask>("generateThrift") {
    inputDir.set(file("src/main/thrift"))
    outputDir.set(file("build/thrift"))
}

val testsJar by tasks.registering(Jar::class) {
    archiveClassifier.set("tests")
    from(sourceSets["test"].output)
}

(publishing.publications["maven"] as MavenPublication).artifact(testsJar)
